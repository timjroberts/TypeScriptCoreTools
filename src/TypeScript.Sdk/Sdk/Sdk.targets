<Project>
    <UsingTask TaskName="Tasks.Npm.ResolvePackagesTask"
        AssemblyFile="$(MSBuildThisFileDirectory)/../lib/netstandard2.0/Tasks.Npm.dll" />
    <UsingTask TaskName="Tasks.TypeScript.WriteTsConfigTask"
        AssemblyFile="$(MSBuildThisFileDirectory)/../lib/netstandard2.0/Tasks.TypeScript.dll" />
    <UsingTask TaskName="Tasks.TypeScript.CompileTypeScriptTask"
        AssemblyFile="$(MSBuildThisFileDirectory)/../lib/netstandard2.0/Tasks.TypeScript.dll" />
    <UsingTask TaskName="Tasks.WebPack.WebPackTask"
        AssemblyFile="$(MSBuildThisFileDirectory)/../lib/netstandard2.0/Tasks.WebPack.dll" />

    <PropertyGroup>
        <TsConfigJsonFilePath>$(MSBuildProjectDirectory)/tsconfig.json</TsConfigJsonFilePath>
        <PackageJsonFilePath>$(MSBuildProjectDirectory)/package.json</PackageJsonFilePath>
        <IndexModuleFilePath>$(MSBuildProjectDirectory)/index.ts</IndexModuleFilePath>
        <ProjectAssetsFilePath>$(MSBuildProjectDirectory)/obj/project.assets.json</ProjectAssetsFilePath>
        <HasIndexModule Condition="Exists('$(IndexModuleFilePath)') Or Exists('$(IndexModuleFilePath)x')">true</HasIndexModule>
    </PropertyGroup>

    <PropertyGroup>
        <RestoreProjectDependsOn>
            RestoreNpmPackages;
            UpdateRestoredTypeRootDirectoryPaths
        </RestoreProjectDependsOn>
        <CompileProjectDependsOn>
            CompileTypeScript;
            Bundle
        </CompileProjectDependsOn>        
    </PropertyGroup>


	<Target Name="RestoreProject"
        AfterTargets="_GenerateProjectRestoreGraph"
        DependsOnTargets="_RestoreProject;$(RestoreProjectDependsOn)"
        Condition="'$(UsingMicrosoftNETSdkWeb)' == 'false'" />


    <Target Name="RestoreNpmPackages"
        Condition="Exists('$(PackageJsonFilePath)')">
        
        <Exec Command="npm install --no-save" WorkingDirectory="$(MSBuildProjectDirectory)" />

        <ResolvePackagesTask PackageJsonFilePath="$(PackageJsonFilePath)" ExportedOnly="true">
            <Output ItemName="_ResolvedPackages" TaskParameter="ResolvedPackages"/>
        </ResolvePackagesTask>

        <CreateItem Include="@(_ResolvedPackages->'%(ResolvedTypesRootDirectoryPath)/**/package.json')"
            AdditionalMetadata="PackageName=%(identity)">
            <Output ItemName="_TypingsFile" TaskParameter="Include" />
        </CreateItem>
        <CreateItem Include="@(_ResolvedPackages->'%(ResolvedTypesRootDirectoryPath)/**/*.d.ts')"
            AdditionalMetadata="PackageName=%(identity)">
            <Output ItemName="_TypingsFile" TaskParameter="Include" />
        </CreateItem>

        <Copy SourceFiles="@(_TypingsFile)"
            DestinationFiles="@(_TypingsFile->'$(MSBuildProjectDirectory)/obj/typings/%(PackageName)/%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>


    <Target Name="UpdateRestoredTypeRootDirectoryPaths"
        Condition="'$(UsingMicrosoftNETSdkWeb)' == 'false' And '$(EmitTypeScript)' == 'true'">

        <MSBuild Projects="@(ProjectReference)" Targets="_GetTsConfigTypeRootDirectoryPaths">
            <Output ItemName="_CompilerPath" TaskParameter="TargetOutputs" />
        </MSBuild>

        <RemoveDuplicates Inputs="@(_CompilerPath)">  
            <Output TaskParameter="Filtered" ItemName="_FilteredCompilerPath" />
        </RemoveDuplicates>

        <WriteTsConfigTask TsConfigJsonFilePath="$(TsConfigJsonFilePath)" CompilerPaths="@(_FilteredCompilerPath)" />
    </Target>


    <Target Name="CompileProject"
        BeforeTargets="CoreCompile"
        DependsOnTargets="$(CompileProjectDependsOn)"
        Condition="'$(UsingMicrosoftNETSdkWeb)' == 'false'" />


    <Target Name="CompileTypeScript"
        Condition="'$(EmitTypeScript)' == 'true' And Exists('$(TsConfigJsonFilePath)') And '$(HasIndexModule)' == 'true'">

        <CompileTypeScriptTask WorkingDirectory="$(MSBuildProjectDirectory)"
            PackageName="$(NpmFormattedPackageName)"
            Configuration="$(Configuration)" />
    </Target>


    <Target Name="Bundle">
        <ResolvePackagesTask PackageJsonFilePath="$(PackageJsonFilePath)" ExportedOnly="true">
            <Output ItemName="_ExportedPackage" TaskParameter="ResolvedPackages"/>
        </ResolvePackagesTask>

        <PropertyGroup>
            <IsBundling Condition="'@(_ExportedPackage)' != '' Or '$(ExportProjectReferences)' == 'true'">true</IsBundling>
            <IsBundlingTarget>false</IsBundlingTarget>
            <IsBundlingTarget Condition="'$(IsBundling)' == 'true'">true</IsBundlingTarget>
        </PropertyGroup>

        <ItemGroup>
            <_BundledPackage Condition="'$(HasIndexModule)' == 'true'"
                Include="$(NpmFormattedPackageName)">

                <ResolvedDirectoryPath>$(MSBuildProjectDirectory)/obj/$(Configuration)/js</ResolvedDirectoryPath>
            </_BundledPackage>
        </ItemGroup>

        <ResolvePackagesTask PackageJsonFilePath="$(PackageJsonFilePath)" ExportedOnly="false">
            <Output ItemName="_BundledPackage" TaskParameter="ResolvedPackages"/>
        </ResolvePackagesTask>

        <MSBuild Projects="@(ProjectReference)"
            Targets="_GetBundledDirectoryPaths"
            Properties="Configuration=$(Configuration);IsBundlingTarget=$(IsBundlingTarget)">

            <Output ItemName="_BundledPackage" TaskParameter="TargetOutputs" />
        </MSBuild>

        <RemoveDuplicates Inputs="@(_BundledPackage)">  
            <Output TaskParameter="Filtered" ItemName="_FilteredBundledPackage" />
        </RemoveDuplicates>

        <WebPackTask WorkingDirectory="$(MSBuildProjectDirectory)"
            Configuration="$(Configuration)"
            WebPackLibraryName="$(WebPackLibraryName)"
            BundleAsLibrary="$(BundleAsLibrary)"
            BundledPackages="@(_FilteredBundledPackage)" />
    </Target>


    <Target Name="_GetBundledDirectoryPaths" Returns="@(_BundledPackageDirectoryPath)">
        <ResolvePackagesTask PackageJsonFilePath="$(PackageJsonFilePath)" ExportedOnly="true">
            <Output ItemName="_ExportedPackage" TaskParameter="ResolvedPackages"/>
        </ResolvePackagesTask>

        <PropertyGroup>
            <IsBundling Condition="'@(_ExportedPackage)' != '' Or '$(ExportProjectReferences)' == 'true'">true</IsBundling>
        </PropertyGroup>

        <ItemGroup>
            <_BundledPackageDirectoryPath Condition="'$(IsBundling)' == 'true'"
                Include="$(NpmFormattedPackageName)">
                <ResolvedDirectoryPath>$(MSBuildProjectDirectory)/bin/$(Configuration)/js</ResolvedDirectoryPath>
                <IsBundle>true</IsBundle>
            </_BundledPackageDirectoryPath>
            <_BundledPackageDirectoryPath Condition="'$(IsBundling)' != 'true' And '$(IsBundlingTarget)' == 'false'"
                Include="$(NpmFormattedPackageName)">
                <ResolvedDirectoryPath>$(MSBuildProjectDirectory)/obj/$(Configuration)/js</ResolvedDirectoryPath>
                <IsBundle>true</IsBundle>
            </_BundledPackageDirectoryPath>
            <_BundledPackageDirectoryPath Condition="'$(IsBundling)' != 'true' And '$(IsBundlingTarget)' == 'true'"
                Include="$(NpmFormattedPackageName)">
                <ResolvedDirectoryPath>$(MSBuildProjectDirectory)/obj/$(Configuration)/js</ResolvedDirectoryPath>
            </_BundledPackageDirectoryPath>
        </ItemGroup>

        <ResolvePackagesTask PackageJsonFilePath="$(PackageJsonFilePath)" ExportedOnly="false"
            Condition="'$(IsBundling)' != 'true'">

            <Output ItemName="_BundledPackageDirectoryPath" TaskParameter="ResolvedPackages"/>
        </ResolvePackagesTask>

        <MSBuild Projects="@(ProjectReference)"
            Targets="_GetBundledDirectoryPaths"
            Properties="Configuration=$(Configuration);IsBundlingTarget=$(IsBundlingTarget)"
            Condition="'$(IsBundling)' != 'true'">

            <Output ItemName="_BundledPackageDirectoryPath" TaskParameter="TargetOutputs" />
        </MSBuild>
    </Target>


    <Target Name="_RestoreProject"
        Condition="!Exists('$(ProjectAssetsFilePath)')">

        <MSBuild Projects="$(MSBuildProjectFile)" Targets="Restore" />
    </Target>


    <Target Name="_GetTsConfigTypeRootDirectoryPaths" Returns="@(_TypesRootDirectoryPath)">
        <ResolvePackagesTask PackageJsonFilePath="$(PackageJsonFilePath)" ExportedOnly="true">
            <Output ItemName="_ExportedPackage" TaskParameter="ResolvedPackages"/>
        </ResolvePackagesTask>

        <PropertyGroup>
            <IsBundling Condition="'@(_ExportedPackage)' != '' Or '$(ExportProjectReferences)' == 'true'">true</IsBundling>
        </PropertyGroup>

        <ItemGroup>
            <_TypesRootDirectoryPath Condition="'$(IsBundling)' == 'true'"
                Include="$([System.IO.Directory]::GetDirectories(&quot;$(MSBuildProjectDirectory)/obj/typings&quot;))" />
            <_TypesRootDirectoryPath Condition="'$(HasIndexModule)' == 'true'"
                Include="$(MSBuildProjectDirectory)/obj/typings/$(NpmFormattedPackageName)" />
        </ItemGroup>

        <MSBuild Projects="@(ProjectReference)"
            Targets="_GetTsConfigTypeRootDirectoryPaths"
            Condition="'$(IsBundling)' == 'true'">

            <Output ItemName="_TypesRootDirectoryPath" TaskParameter="TargetOutputs" />
        </MSBuild>
    </Target>
</Project>